Object subclass: #MiniCTranslator	instanceVariableNames: 'stream indentLevel'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-CTranslator'!!MiniCTranslator methodsFor: 'accessing' stamp: 'CohenAdair 12/3/2014 18:59'!formattedString	^self stream contents! !!MiniCTranslator methodsFor: 'accessing' stamp: 'CohenAdair 12/2/2014 14:49'!indentLevel	^ indentLevel! !!MiniCTranslator methodsFor: 'accessing' stamp: 'CohenAdair 12/2/2014 14:49'!indentLevel: anObject	indentLevel := anObject! !!MiniCTranslator methodsFor: 'accessing' stamp: 'CohenAdair 12/2/2014 14:49'!stream	^ stream! !!MiniCTranslator methodsFor: 'accessing' stamp: 'CohenAdair 12/2/2014 14:49'!stream: anObject	stream := anObject! !!MiniCTranslator methodsFor: 'formatting' stamp: 'CohenAdair 12/2/2014 14:50'!tabIn	indentLevel  := indentLevel + 1! !!MiniCTranslator methodsFor: 'formatting' stamp: 'CohenAdair 12/2/2014 14:50'!tabOut	indentLevel  := indentLevel - 1! !!MiniCTranslator methodsFor: 'initialize-release' stamp: 'CohenAdair 12/2/2014 14:50'!initialize	super initialize.	stream := WriteStream on: (String new: 1024).	indentLevel := 0.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 14:58'!visitMiniAddNode: anAddNode	anAddNode arg1 accept: self.	self stream nextPutAll: ' + '.	anAddNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 09:42'!visitMiniAssignmentNode: anAssignmentNode	anAssignmentNode lhs accept: self.	self stream nextPutAll: ' = '.	anAssignmentNode rhs accept: self.	self stream nextPutAll: ';'.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/3/2014 19:14'!visitMiniCallNode: aMiniCallNode	self stream nextPutAll: '_'.	aMiniCallNode name accept: self.	self stream nextPutAll: '('.	aMiniCallNode arguments		do:			[:each |			each accept: self.			self stream nextPutAll: ', '].	aMiniCallNode arguments notEmpty		ifTrue: 			[self stream skip: -2].	self stream nextPutAll: ')'! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 15:00'!visitMiniDivNode: anDivNode	anDivNode arg1 accept: self.	self stream nextPutAll: ' / '.	anDivNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 15:00'!visitMiniEqualNode: anEqualNode	anEqualNode arg1 accept: self.	self stream nextPutAll: ' == '.	anEqualNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 10:46'!visitMiniFunctionHeadingNode: aFunctionHeadingNode	aFunctionHeadingNode returnType accept: self.	self stream nextPutAll: ' _'.	aFunctionHeadingNode name accept: self.	self stream nextPutAll: '('.	aFunctionHeadingNode parameters accept: self.	aFunctionHeadingNode parameters notEmpty 		ifTrue:			[self stream skip: -3].	self stream nextPutAll: ')'.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 10:45'!visitMiniFunctionNode: aFunctionNode	aFunctionNode heading accept: self.	self stream nextPutAll: ' {'.	self tabIn.	self stream crtab: self indentLevel.	self stream nextPutAll: 'int '.	self stream nextPutAll: aFunctionNode heading name asString.	self stream nextPutAll: ';'; crtab: self indentLevel.	self stream crtab: self indentLevel.	aFunctionNode body accept: self.	self stream crtab: self indentLevel.	self stream nextPutAll: 'return '.	self stream nextPutAll: aFunctionNode heading name asString.	self stream nextPutAll: ';'.	self tabOut.	self stream crtab: self indentLevel.	self stream nextPutAll: '}'.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 15:57'!visitMiniGreaterThanNode: anGreaterThanNode	anGreaterThanNode arg1 accept: self.	self stream nextPutAll: ' > '.	anGreaterThanNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 09:39'!visitMiniIfElseNode: anIfElseNode	self stream nextPutAll: 'if ('.	anIfElseNode condition accept: self.	self tabIn.	self stream nextPutAll: ') {'; crtab: self indentLevel.	anIfElseNode trueStatements 		do:			[:each | 			each accept: self.			self stream crtab: self indentLevel].	self stream skip: -1. "Get rid of extra tab in out stream."	self stream nextPutAll: '} else {'; crtab: self indentLevel.	anIfElseNode falseStatements 		do:			[:each | 			each accept: self.			self stream crtab: self indentLevel].	self stream skip: -1. "Get rid of extra tab in out stream."	self tabOut.	self stream nextPutAll: '}'.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/3/2014 18:54'!visitMiniIfNode: anIfNode	self stream nextPutAll: 'if ('.	anIfNode condition accept: self.	self tabIn.	self stream		nextPutAll: ') {'.	anIfNode trueStatements		do: [ :each | 			self stream crtab: self indentLevel.			each accept: self].	self tabOut.	self stream crtab: self indentLevel.	self stream		nextPutAll: '}';		crtab: self indentLevel! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 16:00'!visitMiniLessThanNode: anLessThanNode	anLessThanNode arg1 accept: self.	self stream nextPutAll: ' < '.	anLessThanNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 16:00'!visitMiniMulNode: anMulNode	anMulNode arg1 accept: self.	self stream nextPutAll: ' * '.	anMulNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 10:01'!visitMiniNameNode: aNameNode	| name |	name := aNameNode asString.	name = 'Integer' 		ifTrue: [name := 'int'].	self stream nextPutAll:  name! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 16:00'!visitMiniNumberNode: aNumberNode	self stream nextPutAll: aNumberNode asString! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 09:26'!visitMiniParametersNode: aParamsNode	aParamsNode parameters 		do:			[:each |			each accept: self.			self stream nextPutAll: ', '].! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 16:00'!visitMiniParenNode: aParenNode	self stream nextPutAll: '('.	aParenNode expression accept: self.	self stream nextPutAll: ')'.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 10:44'!visitMiniProcedureBodyNode: aProcedureBodyNode	aProcedureBodyNode statements		do:			[:each |			each accept: self.			self stream crtab: self indentLevel.].! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 09:44'!visitMiniProcedureHeadingNode: aProcedureHeadingNode	self stream nextPutAll: 'void _'.	aProcedureHeadingNode name accept: self.	self stream nextPutAll: '('.	aProcedureHeadingNode parameters accept: self.	aProcedureHeadingNode parameters notEmpty 		ifTrue:			[self stream skip: -3].	self stream nextPutAll: ')'! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 10:45'!visitMiniProcedureNode: aProcedureNode	aProcedureNode heading accept: self.	self stream nextPutAll: ' {'.	self tabIn.	self stream crtab: self indentLevel.	aProcedureNode body accept: self.	self tabOut.	self stream crtab: self indentLevel.	self stream nextPutAll: '}'.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 10:50'!visitMiniProgramNode: aProgramNode	self stream nextPutAll: '#include <stdio.h>'.	self stream cr. 	self stream crtab: self indentLevel.	aProgramNode variables		do:			[:each |			each accept: self.			self stream crtab: self indentLevel].	self stream skip: -1.	"Sarkela should be fired for writing this code."	self stream cr; cr. 	aProgramNode procedures		do:			[:each |			each accept: self.			self stream crtab: self indentLevel.			self stream cr; cr].	self stream skip: -1.	self stream nextPutAll: 'int main(int argc, char* argv[]) {'.	self tabIn.	self stream crtab: self indentLevel.	aProgramNode statements		do:			[:each |			each accept: self.			self stream crtab: self indentLevel].	self tabOut.	self stream crtab: self indentLevel.	self stream nextPutAll: '}'	! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 16:09'!visitMiniSubNode: anSubNode	anSubNode arg1 accept: self.	self stream nextPutAll: ' - '.	anSubNode arg2 accept: self.! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/2/2014 16:10'!visitMiniVariableDeclNode: aVariableDeclarationNode	aVariableDeclarationNode type accept: self.	self stream nextPutAll: ' '.	aVariableDeclarationNode name accept: self.	self stream nextPutAll: ';'.	! !!MiniCTranslator methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 09:39'!visitMiniWhileNode: aWhileNode	self stream nextPutAll: 'while ('.	aWhileNode condition accept: self.	self stream 		nextPutAll: ')';		crtab: self indentLevel;		nextPutAll: '{'.	self tabIn.	aWhileNode statements		do:			[:each | 			self stream crtab: self indentLevel.			each accept: self].	self tabOut.	self stream 		crtab: self indentLevel;		nextPutAll: '}'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniCTranslator class	instanceVariableNames: ''!!MiniCTranslator class methodsFor: 'printing' stamp: 'CohenAdair 12/2/2014 14:47'!prettyPrint: aString	"Assume <aString> is a mini program. Parse it and pretty print the text."		| ast printer |	ast := MiniParser parse: aString.	printer := self new.	ast accept: printer.	^printer formattedString ! !