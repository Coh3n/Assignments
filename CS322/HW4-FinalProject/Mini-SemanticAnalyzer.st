Object subclass: #MiniSemanticAnalyzer	instanceVariableNames: 'environment errorStream'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-SemanticAnalyzer'!!MiniSemanticAnalyzer methodsFor: 'accessing' stamp: 'CohenAdair 12/3/2014 19:26'!environment	^ environment! !!MiniSemanticAnalyzer methodsFor: 'accessing' stamp: 'CohenAdair 12/3/2014 19:26'!environment: anObject	environment := anObject! !!MiniSemanticAnalyzer methodsFor: 'accessing' stamp: 'CohenAdair 12/4/2014 10:52'!errorStream	^ errorStream! !!MiniSemanticAnalyzer methodsFor: 'accessing' stamp: 'CohenAdair 12/4/2014 10:52'!errorStream: anObject	errorStream := anObject! !!MiniSemanticAnalyzer methodsFor: 'accessing' stamp: 'CohenAdair 12/4/2014 10:59'!errorString	^self errorStream contents! !!MiniSemanticAnalyzer methodsFor: 'accessing' stamp: 'CohenAdair 12/5/2014 09:11'!formattedString	^self errorStream contents! !!MiniSemanticAnalyzer methodsFor: 'initialize-release' stamp: 'CohenAdair 12/5/2014 09:11'!initialize	super initialize.	environment := MiniEnvironment new.	errorStream := WriteStream on: (String new: 1024).	! !!MiniSemanticAnalyzer methodsFor: 'logging' stamp: 'CohenAdair 12/5/2014 10:34'!logError: aMiniErrorNodenamedError: aMiniNameNode	"Assume an error is a subclass of MiniError, and aName is a MiniNameNode."	self errorStream 		nextPutAll: aMiniErrorNode errorName;  		nextPutAll: ' "';		nextPutAll: aMiniNameNode asString;		nextPutAll: '"';		nextPutAll: aMiniErrorNode errorDescription; cr.! !!MiniSemanticAnalyzer methodsFor: 'logging' stamp: 'CohenAdair 12/5/2014 10:00'!logErrorDescription: aString	self stream nextPutAll: aString; cr.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:49'!visitMiniAddNode: anAddNode	anAddNode arg1 accept: self.	anAddNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 10:15'!visitMiniAssignmentNode: anAssignmentNode 	| varName value |	varName := anAssignmentNode lhs asString.	value := anAssignmentNode rhs accept: self.		"Undeclared variable"	[self environment variableNamed: varName put: value]		on: MiniError 		do: [:ex | 				self logError: ex namedError: varName.				ex return nil].! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 10:41'!visitMiniCallNode: aCallNode	| procedure argStream result |		"Undeclared procedure"	[procedure := self environment procedureNamed: aCallNode name asString.]		on: MiniError		do: [:ex |				self logError: ex namedError: aCallNode name asString.				ex return nil].		"Invalid number of arguements"	(aCallNode arguments isNil)		ifFalse: [			(aCallNode arguments size = procedure heading parameters parameters size)				ifFalse: 	[self logErrorDescription: 'Invalid number of parameters in '.						self logErrorDescription: procedure heading name asString]].			^result! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:50'!visitMiniDivNode: aDivNode	aDivNode arg1 accept: self.	aDivNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:50'!visitMiniEqualNode: anEqualNode	anEqualNode arg1 accept: self.	anEqualNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 10:29'!visitMiniFunctionHeadingNode: aMiniFunctionHeadingNode	self environment addVariable: aMiniFunctionHeadingNode name asString value: 0. 	aMiniFunctionHeadingNode parameters parameters		do:			[:each | each accept: self]	! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 23:57'!visitMiniFunctionNode: aFunctionNode	"Mutiple declaration of function"	[self environment 		addProcedure: aFunctionNode heading name asString		value: aFunctionNode]			on: MiniError		do: [:ex |				self logError: ex namedError: aFunctionNode heading name.				ex return nil].  ! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:50'!visitMiniGreaterThanNode: aGreaterThanNode	aGreaterThanNode arg1 accept: self.	aGreaterThanNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:59'!visitMiniIfElseNode: anIfElseNode	anIfElseNode condition accept: self.	anIfElseNode trueStatements do: [:each | each accept: self].	anIfElseNode falseStatements do: [:each | each accept: self]! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 10:09'!visitMiniIfNode: anIfNode	anIfNode condition accept: self.	anIfNode trueStatements do: [:each | each accept: self].! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:50'!visitMiniLessThanNode: aLessThanNode	aLessThanNode arg1 accept: self.	aLessThanNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:49'!visitMiniMulNode: aMulNode	aMulNode arg1 accept: self.	aMulNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:19'!visitMiniNameNode: aNameNode	"By default assume the interpreter is looking up a variable name."	! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 23:07'!visitMiniNumberNode: aNumberNode	^aNumberNode asNumber ! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:30'!visitMiniProcedureBodyNode: aMiniProcedureBodyNode	aMiniProcedureBodyNode statements 		do:			[:each | each accept: self]! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:38'!visitMiniProcedureHeadingNode: aMiniProcedureHeadingNode	aMiniProcedureHeadingNode parameters parameters		do:			[:each | each accept: self]	! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 23:58'!visitMiniProcedureNode: aProcedureNode	"Mutiple declaration of function"	[self environment 		addProcedure: aProcedureNode heading name asString		value: aProcedureNode]			on: MiniError		do: [:ex |				self logError: ex namedError: aProcedureNode heading name.				ex return nil].  ! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 10:29'!visitMiniProgramNode: aProgramNode	aProgramNode variables		do:			[:each | each accept: self].	aProgramNode procedures		do:			[:each | each accept: self].	aProgramNode procedures		do:			[:each |				self environment activateScope.				each heading accept: self.				each body accept: self.				self environment deactivateScope].	aProgramNode statements 		do:			[:each | each accept: self].! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 09:51'!visitMiniSubNode: aSubNode	aSubNode arg1 accept: self.	aSubNode arg2 accept: self.! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/4/2014 23:58'!visitMiniVariableDeclNode: aVariableDeclarationNode	"Multiple declaration of variable"	[self environment 		addVariable: (aVariableDeclarationNode name asString)		value: 0]				on: MiniError		do: [:ex | 			self logError: ex namedError: aVariableDeclarationNode name.			ex return nil].! !!MiniSemanticAnalyzer methodsFor: 'visiting' stamp: 'CohenAdair 12/5/2014 10:10'!visitMiniWhileNode: aWhileNode	aWhileNode condition accept: self.	aWhileNode statements 		do:			[:each | each accept: self]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniSemanticAnalyzer class	instanceVariableNames: ''!!MiniSemanticAnalyzer class methodsFor: 'analyzing' stamp: 'CohenAdair 12/4/2014 11:01'!analyze: aString	"Assume <aString> is a mini program. Analyze it and return a string of errors."		| ast analyzer |	ast := MiniParser parse: aString.	analyzer := self new.	ast accept: analyzer.	^analyzer formattedString ! !